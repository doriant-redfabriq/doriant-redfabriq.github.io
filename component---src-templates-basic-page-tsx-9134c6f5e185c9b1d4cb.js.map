{"version":3,"file":"component---src-templates-basic-page-tsx-9134c6f5e185c9b1d4cb.js","mappings":"qLAEaA,EAAaC,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,sDAOVC,EAAaD,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,mFCmDvB,EA/C2C,SAAC,GAKrC,IAJLE,EAII,EAJJA,WACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,MAEA,OACEC,EAAAA,cAACC,EAAAA,GAAD,CAAKC,GAAG,aAAaC,GAAG,WACtBH,EAAAA,cAACI,EAAAA,GAAD,CAAWC,GAAI,CAAC,OAAQ,QAASF,GAAG,OAClCH,EAAAA,cAACP,EAAD,KACEO,EAAAA,cAACM,EAAAA,GAAD,CAAMC,MAAM,cAAcC,WAAW,OAClCZ,GAEHI,EAAAA,cAACS,EAAAA,GAAD,CAAOC,KAAK,KAAKP,GAAG,MACjBN,GAEHG,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,MAAMZ,IAEnBE,EAAAA,cAACW,EAAAA,GAAD,CACEC,QAAS,CAAC,MAAO,GAAI,iBAAkB,kBACvCC,QAAS,CAAC,OAAQ,SAEjBd,EAAMe,KAAI,SAACC,EAAMC,GAAP,OACThB,EAAAA,cAACL,EAAD,CAAYsB,IAAKD,GACfhB,EAAAA,cAACkB,EAAAA,GAAD,CACEC,IAAKJ,EAAKK,MAAMD,IAChBC,MAAOL,EAAKK,MAAMC,kBAEpBrB,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKH,MAAM,cAAcC,WAAW,OAC5CO,EAAKO,WAAWC,MAEnBvB,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKc,GAAG,UAAUhB,WAAW,MAAMD,MAAM,YACjDQ,EAAKlB,MAAM0B,MAEdvB,EAAAA,cAACM,EAAAA,GAAD,CAAMmB,GAAG,OAAOC,KAAK,KAClBX,EAAKY,YAAYJ,MAEpBvB,EAAAA,cAAC4B,EAAAA,GAAD,CAAQC,KAAK,WAAWnB,KAAK,MAC1BK,EAAKe,YAAYP,c,UCoDlC,EAxFmD,SAAC,GAO7C,IANL1B,EAMI,EANJA,MACA8B,EAKI,EALJA,YACAI,EAII,EAJJA,OACAC,EAGI,EAHJA,SACApC,EAEI,EAFJA,WACAM,EACI,EADJA,GAEA,OACEF,EAAAA,cAACC,EAAAA,GAAD,CAAKC,GAAIA,EAAIC,GAAG,UAAU8B,UAAU,UAClCjC,EAAAA,cAACI,EAAAA,GAAD,CAAW8B,GAAI,CAAC,OAAQ,UAAWC,GAAI,CAAC,OAAQ,UAAWhC,GAAG,OAC5DH,EAAAA,cAACC,EAAAA,GAAD,CACEmC,QAAQ,OACRC,WAAW,SACXC,cAAc,SACdC,SAAS,QACTC,EAAE,UAED5C,GACCI,EAAAA,cAACM,EAAAA,GAAD,CAAMC,MAAM,cAAcC,WAAW,MAAMiB,GAAG,WAC3C7B,GAGLI,EAAAA,cAACS,EAAAA,GAAD,CAAOC,KAAK,KAAKe,GAAG,WACjB5B,GAEHG,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKe,GAAG,UAChBE,GAEFI,GAEH/B,EAAAA,cAACW,EAAAA,GAAD,CACEC,QAAS,CAAC,MAAO,iBAAR,kBACTC,QAAQ,QAEPmB,EAASlB,KAAI,SAAC2B,EAASzB,GAAS,IAAD,EACxB0B,EAAS,UAAGD,EAAQE,eAAeC,gBAA1B,aAAGC,EAAiCC,KAEnD,OAAIJ,EAEA1C,EAAAA,cAAC+C,EAAAA,GAAD,CAAM9B,IAAKD,EAAKsB,cAAc,UAC5BtC,EAAAA,cAACgD,EAAAA,EAAD,CACE5B,MAAOsB,EAAUtB,MAAMC,gBACvBF,IAAKuB,EAAUtB,MAAMD,IACrB8B,MAAO,CAAEvB,KAAM,KAEjB1B,EAAAA,cAACM,EAAAA,GAAD,CACEI,KAAK,KACL8B,EAAG,CAAC,iBAAkB,kBACtBU,cAAc,YACd1C,WAAW,MACXD,MAAM,YAELmC,EAAUS,KAAK5B,MAElBvB,EAAAA,cAACM,EAAAA,GAAD,yDAKFN,EAAAA,cAACC,EAAAA,GAAD,CAAKgB,IAAKD,GACRhB,EAAAA,cAACgD,EAAAA,EAAD,CACE5B,MAAOqB,EAAQrB,MAAMC,gBACrBF,IAAKsB,EAAQrB,MAAMD,MAErBnB,EAAAA,cAACM,EAAAA,GAAD,CACEI,KAAK,KACL8B,EAAG,CAAC,iBAAkB,kBACtBU,cAAc,YACd1C,WAAW,MACXD,MAAM,YAELkC,EAAQ5C,MAAM0B,MAEjBvB,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKH,MAAM,cAAckB,GAAG,QACpCgB,EAAQ3C,SAASyB,MAEpBvB,EAAAA,cAACM,EAAAA,GAAD,KAAOmC,EAAQd,YAAYJ,cC1C7C,EArC4C,SAAC,GAMtC,IALL1B,EAKI,EALJA,MACA8B,EAII,EAJJA,YACAI,EAGI,EAHJA,OACAX,EAEI,EAFJA,MACAxB,EACI,EADJA,WAEA,OACEI,EAAAA,cAACC,EAAAA,GAAD,CAAKC,GAAG,cAAcC,GAAG,WACvBH,EAAAA,cAACI,EAAAA,GAAD,CAAWC,GAAI,CAAC,OAAQ,QAASF,GAAG,OAClCH,EAAAA,cAACW,EAAAA,GAAD,CACEC,QAAS,CAAC,MAAO,kBACjBC,QAAQ,OACRwB,WAAW,UAEXrC,EAAAA,cAACC,EAAAA,GAAD,KACGL,GACCI,EAAAA,cAACM,EAAAA,GAAD,CAAME,WAAW,MAAMiB,GAAG,UAAUlB,MAAM,SACvCX,GAGLI,EAAAA,cAACS,EAAAA,GAAD,CAAON,GAAG,KAAKO,KAAK,KAAKe,GAAG,SAASlB,MAAM,SACxCV,GAEHG,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKe,GAAG,SAASlB,MAAM,SAC/BoB,GAEFI,GAEH/B,EAAAA,cAACC,EAAAA,GAAD,KACED,EAAAA,cAACkB,EAAAA,GAAD,CAAaE,MAAOA,EAAMC,gBAAiBF,IAAKC,EAAMD,W,UCoClE,EAhEmD,SAAC,GAM7C,IALLtB,EAKI,EALJA,MACA8B,EAII,EAJJA,YACAP,EAGI,EAHJA,MACAgC,EAEI,EAFJA,KACAxD,EACI,EADJA,WAEA,OACEI,EAAAA,cAACI,EAAAA,GAAD,CAAW8B,GAAI,CAAC,OAAQ,QAASC,GAAI,CAAC,OAAQ,WAC5CnC,EAAAA,cAACC,EAAAA,GAAD,CAAKwB,GAAG,OAAOc,SAAS,SACrB3C,GACCI,EAAAA,cAACM,EAAAA,GAAD,CAAMC,MAAM,cAAcC,WAAW,MAAMiB,GAAG,WAC3C7B,GAGLI,EAAAA,cAACS,EAAAA,GAAD,CAAOC,KAAK,KAAKe,GAAG,WACjB5B,GAEHG,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,MAAMiB,IAEnB3B,EAAAA,cAACW,EAAAA,GAAD,CACEC,QAAS,CAAC,MAAO,kBACjBC,QAAQ,OACRwB,WAAW,UAEXrC,EAAAA,cAAC+C,EAAAA,GAAD,CAAMT,cAAc,UACjBc,EAAKtC,KAAI,SAACuC,EAAMrC,GAAP,OACRhB,EAAAA,cAAC+C,EAAAA,GAAD,CAAM9B,IAAKD,EAAKS,GAAG,OAAOY,WAAW,YACnCrC,EAAAA,cAACsD,EAAAA,GAAD,CACEC,MAAM,OACNC,OAAO,OACPtD,GAAG,aACHK,MAAM,eAENP,EAAAA,cAACyD,EAAAA,EAAD,CACEN,KAAME,EAAKK,KACXH,MAAM,SACNC,OAAO,YAGXxD,EAAAA,cAACC,EAAAA,GAAD,CAAK0D,GAAG,QACN3D,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKF,WAAW,MAAMD,MAAM,WAAWkB,GAAG,WAClD4B,EAAKxD,MAAM0B,MAEdvB,EAAAA,cAAC+C,EAAAA,GAAD,CAAMV,WAAW,UACfrC,EAAAA,cAACM,EAAAA,GAAD,CAAMC,MAAM,cAAcC,WAAW,MAAMoD,GAAG,UAC3CP,EAAKvB,YAAYP,MAEpBvB,EAAAA,cAACyD,EAAAA,EAAD,CACEN,KAAK,cACLI,MAAM,OACNC,OAAO,OACPjD,MAAM,uBAOlBP,EAAAA,cAACkB,EAAAA,GAAD,CAAaE,MAAOA,EAAMC,gBAAiBF,IAAKC,EAAMD,SCC9D,EA3D+C,SAAC,GAQzC,IAPLtB,EAOI,EAPJA,MACAC,EAMI,EANJA,SACAsD,EAKI,EALJA,KACArB,EAII,EAJJA,OAII,IAHJ7B,GAAAA,OAGI,MAHC,cAGD,MAFJ2D,WAAAA,OAEI,MAFS,QAET,MADJC,UAAAA,OACI,MADQ,QACR,EACJ,OACE9D,EAAAA,cAACC,EAAAA,GAAD,CAAKC,GAAIA,EAAIC,GAAG,WACdH,EAAAA,cAACI,EAAAA,GAAD,CAAWD,GAAG,MAAME,GAAI,CAAC,OAAQ,UAAW4B,UAAU,UACpDjC,EAAAA,cAACS,EAAAA,GAAD,CAAON,GAAG,KAAKO,KAAK,KAAKe,GAAG,UAAUlB,MAAOsD,GAC1ChE,GAEHG,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKH,MAAOuD,GACpBhE,GAEFiC,GAAUA,EACX/B,EAAAA,cAACW,EAAAA,GAAD,CACEC,QAAS,CAAC,MAAO,iBAAkB,GAAI,kBACvCC,QAAQ,aACRkD,GAAG,QAEFX,EAAKtC,KAAI,SAACuC,EAAMrC,GAAP,OACRhB,EAAAA,cAACC,EAAAA,GAAD,CAAKgB,IAAKD,GACRhB,EAAAA,cAACsD,EAAAA,GAAD,CACEC,MAAM,OACNC,OAAO,OACPtD,GAAIA,EAAK,aAAe,aACxBK,MAAM,cACNyD,OAAO,UAEPhE,EAAAA,cAACyD,EAAAA,EAAD,CACEN,KAAME,EAAKK,KACXH,MAAM,SACNC,OAAO,YAGXxD,EAAAA,cAACC,EAAAA,GAAD,CAAK8D,GAAG,WACN/D,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,KAAKF,WAAW,MAAMiB,GAAG,SAASlB,MAAOsD,GACjDR,EAAKxD,MAAM0B,MAEb8B,EAAK1B,aACJ3B,EAAAA,cAACM,EAAAA,GAAD,CAAMC,MAAOuD,GAAYT,EAAK1B,YAAYJ,MAE3C8B,EAAKvB,YAAYP,MAChBvB,EAAAA,cAAC4B,EAAAA,GAAD,CAAQC,KAAK,QAAQkC,GAAG,WACrBV,EAAKvB,YAAYP,eC5DzB0C,GAAevE,EAAAA,EAAAA,SAAOO,EAAAA,IAAViE,WAAA,8DAAGxE,CAAH,kIAKV,qBAAGyE,MAAkBC,OAAOC,QAAQ,QAIjB,qBAAGF,MAAkBG,GAAGC,MAExC,qBAAGtC,aAIRuC,GAAc9E,EAAAA,EAAAA,SAAOiB,EAAAA,IAAVuD,WAAA,6DAAGxE,CAAH,2OAUU,qBAAGyE,MAAkBG,GAAGC,MAEzC,qBAAGE,aACT,qBAAG5D,WAKD6D,GAAoBhF,EAAAA,EAAAA,SAAOO,EAAAA,IAAViE,WAAA,mEAAGxE,CAAH,qKAMN,qBAAGyE,MAAkBC,OAAOC,QAAQ,QAG1B,qBAAGF,MAAkBG,GAAGC,MAK7CI,GAAejF,EAAAA,EAAAA,SAAOO,EAAAA,IAAViE,WAAA,8DAAGxE,CAAH,yLAQT,qBAAGyE,MAAkBC,OAAOC,QAAQ,QAGlB,qBAAGF,MAAkBG,GAAGC,MAK7CK,GAAiBlF,EAAAA,EAAAA,SAAOO,EAAAA,IAAViE,WAAA,gEAAGxE,CAAH,iRAEX,qBAAGyE,MAAkBC,OAAOC,QAAQ,QAUlB,qBAAGF,MAAkBG,GAAGC,MAS7CM,GAAkBnF,EAAAA,EAAAA,SAAOqD,EAAAA,IAAVmB,WAAA,iEAAGxE,CAAH,mPAQM,qBAAGyE,MAAkBG,GAAGC,MAIxB,qBAAGJ,MAAkBG,GAAGQ,MCD1D,EA/EmD,SAAC,GAI7C,IAHLjF,EAGI,EAHJA,MACAD,EAEI,EAFJA,WACAwD,EACI,EADJA,KAEA,OACEpD,EAAAA,cAACC,EAAAA,GAAD,CAAKE,GAAG,UAAUD,GAAG,cACnBF,EAAAA,cAACI,EAAAA,GAAD,CACED,GAAG,MACH8B,UAAU,SACVC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,UAEbnC,EAAAA,cAACM,EAAAA,GAAD,CAAMmB,GAAG,UAAUjB,WAAW,MAAMD,MAAM,eACvCX,GAEHI,EAAAA,cAACS,EAAAA,GAAD,CAAON,GAAG,KAAKO,KAAK,MACjBb,GAEHG,EAAAA,cAAC0E,EAAD,KACGtB,EAAKtC,KAAI,SAACuC,EAAMrC,GAAP,OACRhB,EAAAA,cAACwE,EAAD,CACEvD,IAAKD,EACLJ,QAAS,CAAC,MAAO,GAAI,kBACrBC,QAAQ,cACR4D,UAAWzD,EAAM,GAAM,EAAI,MAAQ,OAEnChB,EAAAA,cAAC4E,EAAD,KACE5E,EAAAA,cAACM,EAAAA,GAAD,CAAMC,MAAM,SAASS,EAAM,IAE7BhB,EAAAA,cAACiE,EAAD,CAAchC,UAAWjB,EAAM,GAAM,EAAI,QAAU,QACjDhB,EAAAA,cAACS,EAAAA,GAAD,CACEN,GAAG,KACHO,KAAK,KACLe,GAAG,UACHsD,wBAAyB,CACvBC,OAAQ3B,EAAKxD,MAAM0B,QAGvBvB,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,MAAM2C,EAAK1B,YAAYJ,MACjC8B,EAAK4B,gBACJjF,EAAAA,cAAC6E,EAAD,CAAiBxC,WAAW,UAC1BrC,EAAAA,cAAC4B,EAAAA,GAAD,CAAQC,KAAK,QAAQnB,KAAK,KAAKwE,GAAG,KAChClF,EAAAA,cAACyD,EAAAA,GAAD,CACEN,KAAK,aACLI,MAAM,OACNC,OAAO,OACPI,GAAG,WALP,0BASA5D,EAAAA,cAAC4B,EAAAA,GAAD,CAAQC,KAAK,WAAWnB,KAAK,KAAKwE,GAAG,gBACnClF,EAAAA,cAACyD,EAAAA,GAAD,CACEN,KAAK,WACLI,MAAM,OACNC,OAAO,OACPI,GAAG,WALP,yBAYN5D,EAAAA,cAACC,EAAAA,GAAD,KACED,EAAAA,cAACgD,EAAAA,EAAD,CACE5B,MAAOiC,EAAKjC,MAAMC,gBAClBF,IAAKkC,EAAKjC,MAAMD,IAChB8B,MAAO,CAAEM,MAAO,OAAQC,OAAQ,QAChC2B,SAAU,CAAE5B,MAAO,OAAQC,OAAQ,eAK3CxD,EAAAA,cAAC2E,EAAD,UCRV,EAvE6C,SAAC,GAAc,IAAZ7B,EAAW,EAAXA,KAC9C,OAAQA,EAAKsC,YACX,IAAK,eACH,OACEpF,EAAAA,cAACqF,EAAD,CACEzF,WAAYkD,EAAKuB,QAAQ/C,WAAWC,KACpC1B,MAAOiD,EAAKuB,QAAQxE,MAAM0B,KAC1BzB,SAAUgD,EAAKuB,QAAQvE,SAASyB,KAChCxB,MAAO+C,EAAKwC,QAGlB,IAAK,mBACH,OACEtF,EAAAA,cAACuF,EAAD,CACErF,GAAI4C,EAAKuB,QAAQmB,WACjB5F,WAAYkD,EAAKuB,QAAQ/C,WAAWC,KACpC1B,MAAOiD,EAAKuB,QAAQxE,MAAM0B,KAC1BI,YAAamB,EAAKuB,QAAQ1C,YAAYJ,KACtCQ,OACE/B,EAAAA,cAAC4B,EAAAA,GAAD,CAAQC,KAAK,WAAWnB,KAAK,KAAKwE,GAAIpC,EAAKuB,QAAQoB,YAAYC,KAC5D5C,EAAKuB,QAAQvC,YAAYP,MAG9BS,SAAUc,EAAKwC,QAGrB,IAAK,oBACH,OACEtF,EAAAA,cAAC2F,EAAD,CACE9F,MAAOiD,EAAKuB,QAAQxE,MAAM0B,KAC1BI,YAAamB,EAAKuB,QAAQ1C,YAAYJ,KACtC3B,WAAYkD,EAAKuB,QAAQ/C,WAAWC,KACpCQ,OAAQ/B,EAAAA,cAAC4B,EAAAA,GAAD,CAAQC,KAAK,SAASiB,EAAKuB,QAAQvC,YAAYP,MACvDH,MAAO0B,EAAKuB,QAAQjD,QAG1B,IAAK,mBACH,OACEpB,EAAAA,cAAC4F,EAAD,CACE/F,MAAOiD,EAAKuB,QAAQxE,MAAM0B,KAC1BI,YAAamB,EAAKuB,QAAQvE,SAASyB,KACnC3B,WAAYkD,EAAKuB,QAAQ/C,WAAWC,KACpCH,MAAO0B,EAAKuB,QAAQjD,MACpBgC,KAAMN,EAAKwC,QAGjB,IAAK,iBACH,OACEtF,EAAAA,cAAC6F,EAAD,CACE3F,GAAI4C,EAAKuB,QAAQmB,iBAAcM,EAC/BjC,WAAYf,EAAKuB,QAAQ0B,kBAAeD,EACxChC,UAAWhB,EAAKuB,QAAQ2B,iBAAcF,EACtCjG,MAAOiD,EAAKuB,QAAQxE,MAAM0B,KAC1BzB,SAAUgD,EAAKuB,QAAQvE,SAASyB,KAChC6B,KAAMN,EAAKwC,QAGjB,IAAK,mBACH,OACEtF,EAAAA,cAACiG,EAAD,CACEpG,MAAOiD,EAAKuB,QAAQxE,MAAM0B,KAC1B3B,WAAYkD,EAAKuB,QAAQ/C,WAAWC,KACpC6B,KAAMN,EAAKwC,QAOnB,OAAOtF,EAAAA,cAAAA,MAAAA,Q,kFCdT,UAzDuC,SAAC,GAAc,IACpD,EADmD,EAAX8C,KAQ/BoD,iBAAiBpD,KANxBqD,EADF,EACEA,WACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,iBACAC,EALF,EAKEA,iBACAC,EANF,EAMEA,KAGF,OACExG,EAAAA,cAACyG,EAAAA,EAAD,KACEzG,EAAAA,cAACI,EAAAA,GAAD,KACEJ,EAAAA,cAAC0G,EAAAA,GAAD,KACE1G,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACS,EAAAA,GAAD,CAAON,GAAG,KAAKO,KAAK,KAAKe,GAAG,UACzB0E,EAAW5E,MAEdvB,EAAAA,cAACM,EAAAA,GAAD,CAAMI,KAAK,MAAM2F,EAAU9E,MAC3BvB,EAAAA,cAAC4B,EAAAA,GAAD,CACEC,KAAK,WACLnB,KAAK,MACLqD,GAAG,OACHmB,GAAIqB,EAAiBb,KAErB1F,EAAAA,cAACyD,EAAAA,GAAD,CACEN,KAAK,WACLI,MAAM,UACNC,OAAO,UACPI,GAAG,SAEJ0C,EAAiB/E,OAGtBvB,EAAAA,cAACkB,EAAAA,GAAD,CACEE,MAAOgF,EAAW/E,gBAClBF,IAAKiF,EAAWjF,QAIrBqF,EAAK1F,KAAI,SAACuC,EAAMrC,GAAP,OACRhB,EAAAA,cAAC2G,EAAAA,EAAD,CAAc1F,IAAKD,EAAK8B,KAAMO","sources":["webpack://audiplus/./src/components/CardSection/styled.ts","webpack://audiplus/./src/components/CardSection/index.tsx","webpack://audiplus/./src/components/ProductsSection/index.tsx","webpack://audiplus/./src/components/RichTextSection/index.tsx","webpack://audiplus/./src/components/FeaturesSection/index.tsx","webpack://audiplus/./src/components/BannerSection/index.tsx","webpack://audiplus/./src/components/TimelineSection/style.ts","webpack://audiplus/./src/components/TimelineSection/index.tsx","webpack://audiplus/./src/components/SliceSection.tsx","webpack://audiplus/./src/templates/basicPage.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const StyledHead = styled.div`\n  margin-bottom: 4rem;\n  h2 {\n    margin: 0.75rem 0 1.25rem;\n  }\n`\n\nexport const StyledCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  .gatsby-image-wrapper {\n    margin-bottom: 2rem;\n  }\n`\n","import React, { FC } from 'react'\nimport { Box, Container, ImageBorder } from 'styles/globalStyle'\nimport { Title, Grid, Button, Text } from '../theme'\nimport { StyledCard, StyledHead } from './styled'\nimport { CardItemsTypes } from 'types/sections/cardSection'\n\ntype CardSectionParams = {\n  subHeading: string\n  title: string\n  subtitle: string\n  cards: CardItemsTypes[]\n}\n\nconst CardSection: FC<CardSectionParams> = ({\n  subHeading,\n  title,\n  subtitle,\n  cards,\n}) => {\n  return (\n    <Box bg=\"primary.25\" as=\"section\">\n      <Container py={['4rem', '5rem']} as=\"div\">\n        <StyledHead>\n          <Text color=\"primary.700\" fontWeight=\"600\">\n            {subHeading}\n          </Text>\n          <Title size=\"sm\" as=\"h2\">\n            {title}\n          </Title>\n          <Text size=\"xl\">{subtitle}</Text>\n        </StyledHead>\n        <Grid\n          columns={['1fr', '', 'repeat(2, 1fr)', 'repeat(3, 1fr)']}\n          spacing={['3rem', '2rem']}\n        >\n          {cards.map((card, idx) => (\n            <StyledCard key={idx}>\n              <ImageBorder\n                alt={card.image.alt}\n                image={card.image.gatsbyImageData}\n              />\n              <Text size=\"sm\" color=\"primary.700\" fontWeight=\"600\">\n                {card.subheading.text}\n              </Text>\n              <Text size=\"xl\" my=\"0.75rem\" fontWeight=\"600\" color=\"gray.900\">\n                {card.title.text}\n              </Text>\n              <Text mb=\"2rem\" flex=\"1\">\n                {card.description.text}\n              </Text>\n              <Button type=\"gradient\" size=\"xl\">\n                {card.button_text.text}\n              </Button>\n            </StyledCard>\n          ))}\n        </Grid>\n      </Container>\n    </Box>\n  )\n}\nexport default CardSection\n","import React, { FC, ReactNode } from 'react'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { Box, Container, Flex } from 'styles/globalStyle'\nimport { Grid, Text, Title } from 'components/theme'\nimport { ProductsItemsTypes } from 'types/sections/productsSection'\n\nexport type ProductsSectionParams = {\n  title: string\n  description: string\n  button: ReactNode\n  products: ProductsItemsTypes[]\n  subHeading?: string\n  bg?: string\n}\n\nconst ProductsSection: FC<ProductsSectionParams> = ({\n  title,\n  description,\n  button,\n  products,\n  subHeading,\n  bg,\n}) => {\n  return (\n    <Box bg={bg} as=\"section\" textAlign=\"center\">\n      <Container pt={['4rem', '4.5rem']} pb={['4rem', '7.5rem']} as=\"div\">\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          maxWidth=\"768px\"\n          m=\"0 auto\"\n        >\n          {subHeading && (\n            <Text color=\"primary.700\" fontWeight=\"600\" mb=\"0.75rem\">\n              {subHeading}\n            </Text>\n          )}\n          <Title size=\"sm\" mb=\"1.25rem\">\n            {title}\n          </Title>\n          <Text size=\"xl\" mb=\"2.5rem\">\n            {description}\n          </Text>\n          {button}\n        </Box>\n        <Grid\n          columns={['1fr', 'repeat(2, 1fr)', `repeat(3, 1fr)`]}\n          spacing=\"2rem\"\n        >\n          {products.map((product, idx) => {\n            const itemBrand = product.product_brands.document?.data\n\n            if (itemBrand) {\n              return (\n                <Flex key={idx} flexDirection=\"column\">\n                  <GatsbyImage\n                    image={itemBrand.image.gatsbyImageData}\n                    alt={itemBrand.image.alt}\n                    style={{ flex: 1 }}\n                  />\n                  <Text\n                    size=\"xl\"\n                    m={['2rem 0 0.25rem', '4rem 0 0.25rem']}\n                    textTransform=\"uppercase\"\n                    fontWeight=\"600\"\n                    color=\"gray.900\"\n                  >\n                    {itemBrand.name.text}\n                  </Text>\n                  <Text>Fournisseur d’aides auditives et d’accessoires.</Text>\n                </Flex>\n              )\n            } else {\n              return (\n                <Box key={idx}>\n                  <GatsbyImage\n                    image={product.image.gatsbyImageData}\n                    alt={product.image.alt}\n                  />\n                  <Text\n                    size=\"xl\"\n                    m={['2rem 0 0.25rem', '4rem 0 0.25rem']}\n                    textTransform=\"uppercase\"\n                    fontWeight=\"600\"\n                    color=\"gray.900\"\n                  >\n                    {product.title.text}\n                  </Text>\n                  <Text size=\"lg\" color=\"primary.700\" mb=\"1rem\">\n                    {product.subtitle.text}\n                  </Text>\n                  <Text>{product.description.text}</Text>\n                </Box>\n              )\n            }\n          })}\n        </Grid>\n      </Container>\n    </Box>\n  )\n}\n\nexport default ProductsSection\n","import React, { FC, ReactNode } from 'react'\nimport { Grid, Text, Title } from 'components/theme'\nimport { Box, Container, ImageBorder } from 'styles/globalStyle'\nimport { ImageType } from 'types/dataTypes'\n\ntype RichTextParams = {\n  title: string\n  description: string\n  button: ReactNode\n  image: ImageType\n  subHeading?: string\n}\n\nconst RichTextSection: FC<RichTextParams> = ({\n  title,\n  description,\n  button,\n  image,\n  subHeading,\n}) => {\n  return (\n    <Box bg=\"primary.600\" as=\"section\">\n      <Container py={['4rem', '5rem']} as=\"div\">\n        <Grid\n          columns={['1fr', 'repeat(2, 1fr)']}\n          spacing=\"4rem\"\n          alignItems=\"center\"\n        >\n          <Box>\n            {subHeading && (\n              <Text fontWeight=\"600\" mb=\"0.75rem\" color=\"white\">\n                {subHeading}\n              </Text>\n            )}\n            <Title as=\"h3\" size=\"sm\" mb=\"2.5rem\" color=\"white\">\n              {title}\n            </Title>\n            <Text size=\"lg\" mb=\"2.5rem\" color=\"white\">\n              {description}\n            </Text>\n            {button}\n          </Box>\n          <Box>\n            <ImageBorder image={image.gatsbyImageData} alt={image.alt} />\n          </Box>\n        </Grid>\n      </Container>\n    </Box>\n  )\n}\nexport default RichTextSection\n","import React, { FC } from 'react'\nimport { Box, Circle, Container, Flex, ImageBorder } from 'styles/globalStyle'\nimport { Title, Text, Grid } from 'components/theme'\nimport Icons, { IconsName } from 'components/theme/Icons'\nimport { ImageType } from 'types/dataTypes'\nimport { FeaturesItemsTypes } from 'types/sections/featuresSection'\n\nexport type FeaturesSectionParams = {\n  title: string\n  description: string\n  image: ImageType\n  list: FeaturesItemsTypes[]\n  subHeading?: string\n}\n\nconst FeaturesSection: FC<FeaturesSectionParams> = ({\n  title,\n  description,\n  image,\n  list,\n  subHeading,\n}) => {\n  return (\n    <Container pt={['4rem', '5rem']} pb={['4rem', '7.5rem']}>\n      <Box mb=\"4rem\" maxWidth=\"768px\">\n        {subHeading && (\n          <Text color=\"primary.700\" fontWeight=\"600\" mb=\"0.75rem\">\n            {subHeading}\n          </Text>\n        )}\n        <Title size=\"sm\" mb=\"1.25rem\">\n          {title}\n        </Title>\n        <Text size=\"xl\">{description}</Text>\n      </Box>\n      <Grid\n        columns={['1fr', 'repeat(2, 1fr)']}\n        spacing=\"4rem\"\n        alignItems=\"center\"\n      >\n        <Flex flexDirection=\"column\">\n          {list.map((item, idx) => (\n            <Flex key={idx} mb=\"2rem\" alignItems=\"baseline\">\n              <Circle\n                width=\"3rem\"\n                height=\"3rem\"\n                bg=\"primary.25\"\n                color=\"primary.600\"\n              >\n                <Icons\n                  name={item.icon as IconsName}\n                  width=\"1.5rem\"\n                  height=\"1.5rem\"\n                />\n              </Circle>\n              <Box ml=\"1rem\">\n                <Text size=\"xl\" fontWeight=\"500\" color=\"gray.900\" mb=\"1.25rem\">\n                  {item.title.text}\n                </Text>\n                <Flex alignItems=\"center\">\n                  <Text color=\"primary.700\" fontWeight=\"500\" mr=\"0.5rem\">\n                    {item.button_text.text}\n                  </Text>\n                  <Icons\n                    name=\"arrow-right\"\n                    width=\"1rem\"\n                    height=\"1rem\"\n                    color=\"primary.700\"\n                  />\n                </Flex>\n              </Box>\n            </Flex>\n          ))}\n        </Flex>\n        <ImageBorder image={image.gatsbyImageData} alt={image.alt} />\n      </Grid>\n    </Container>\n  )\n}\nexport default FeaturesSection\n","import React, { FC, ReactNode } from 'react'\nimport Icons, { IconsName } from 'components/theme/Icons'\nimport { Title, Text, Grid, Button } from 'components/theme'\nimport { Box, Circle, Container } from 'styles/globalStyle'\nimport { BannerItemsTypes } from 'types/sections/bannerSection'\n\nexport type BannerSectionParams = {\n  title: string\n  subtitle: string\n  list: BannerItemsTypes[]\n  button?: ReactNode\n  bg?: string\n  titleColor?: string\n  textColor?: string\n}\n\nconst BannerSection: FC<BannerSectionParams> = ({\n  title,\n  subtitle,\n  list,\n  button,\n  bg = 'primary.600',\n  titleColor = 'white',\n  textColor = 'white',\n}) => {\n  return (\n    <Box bg={bg} as=\"section\">\n      <Container as=\"div\" py={['4rem', '4.5rem']} textAlign=\"center\">\n        <Title as=\"h3\" size=\"sm\" mb=\"1.25rem\" color={titleColor}>\n          {title}\n        </Title>\n        <Text size=\"xl\" color={textColor}>\n          {subtitle}\n        </Text>\n        {button && button}\n        <Grid\n          columns={['1fr', 'repeat(2, 1fr)', '', 'repeat(3, 1fr)']}\n          spacing=\" 4rem 2rem\"\n          mt=\"4rem\"\n        >\n          {list.map((item, idx) => (\n            <Box key={idx}>\n              <Circle\n                width=\"3rem\"\n                height=\"3rem\"\n                bg={bg ? 'primary.50' : 'primary.25'}\n                color=\"primary.600\"\n                margin=\"0 auto\"\n              >\n                <Icons\n                  name={item.icon as IconsName}\n                  width=\"1.5rem\"\n                  height=\"1.5rem\"\n                />\n              </Circle>\n              <Box mt=\"1.25rem\">\n                <Text size=\"xl\" fontWeight=\"500\" mb=\"0.5rem\" color={titleColor}>\n                  {item.title.text}\n                </Text>\n                {item.description && (\n                  <Text color={textColor}>{item.description.text}</Text>\n                )}\n                {item.button_text.text && (\n                  <Button type=\"light\" mt=\"1.25rem\">\n                    {item.button_text.text}\n                  </Button>\n                )}\n              </Box>\n            </Box>\n          ))}\n        </Grid>\n      </Container>\n    </Box>\n  )\n}\nexport default BannerSection\n","import styled from 'styled-components'\nimport { Grid } from 'components/theme'\nimport { Box, Flex } from 'styles/globalStyle'\n\nexport const TimelineText = styled(Box)`\n  text-align: unset;\n  margin-bottom: 1.5rem;\n  h3 {\n    span {\n      color: ${({ theme }) => theme.colors.primary[700]};\n    }\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.sm}) {\n    margin-bottom: 0;\n    text-align: ${({ textAlign }) => textAlign};\n  }\n`\n\nexport const TimelineRow = styled(Grid)<{ direction: string }>`\n  margin-top: 2.5rem;\n  grid-auto-flow: dense;\n  direction: unset;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: unset;\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.sm}) {\n    margin-top: 4.5rem;\n    direction: ${({ direction }) => direction};\n    gap: ${({ spacing }) => spacing};\n    display: grid;\n  }\n`\n\nexport const TimelineContainer = styled(Box)`\n  position: relative;\n  max-width: 100%;\n  margin: 0 auto;\n  .gatsby-image-wrapper {\n    border-radius: 1rem;\n    border: 2px solid ${({ theme }) => theme.colors.primary[500]};\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.sm}) {\n    max-width: 90%;\n  }\n`\n\nexport const TimelineLine = styled(Box)`\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 2px;\n  height: 100%;\n  padding-bottom: 4rem;\n  background: ${({ theme }) => theme.colors.primary[500]};\n  display: none;\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.sm}) {\n    display: block;\n  }\n`\n\nexport const TimelineNumber = styled(Box)`\n  position: static;\n  background: ${({ theme }) => theme.colors.primary[600]};\n  width: 2rem;\n  height: 2rem;\n  z-index: 1;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 1rem;\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.sm}) {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    margin-bottom: 0;\n  }\n`\n\nexport const TimelineButtons = styled(Flex)`\n  flex-direction: column;\n  direction: ltr;\n  margin-top: 2rem;\n  a:first-child {\n    margin-bottom: 0.75rem;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.sm}) {\n    align-items: flex-start;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.bp.xl}) {\n    flex-direction: row;\n    a:first-child {\n      margin-right: 0.75rem;\n    }\n  }\n`\n","import React, { FC } from 'react'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { Title, Text, Icons, Button } from 'components/theme'\nimport { Box, Container } from 'styles/globalStyle'\nimport { TimelineItemsTypes } from 'types/sections/timelineSection'\nimport {\n  TimelineButtons,\n  TimelineContainer,\n  TimelineLine,\n  TimelineNumber,\n  TimelineRow,\n  TimelineText,\n} from './style'\n\ntype TimelineSectionParams = {\n  title: string\n  list: TimelineItemsTypes[]\n  subHeading: string\n}\n\nconst TimelineSection: FC<TimelineSectionParams> = ({\n  title,\n  subHeading,\n  list,\n}) => {\n  return (\n    <Box as=\"section\" bg=\"primary.25\">\n      <Container\n        as=\"div\"\n        textAlign=\"center\"\n        pt={['4rem', '6rem']}\n        pb={['4rem', '13rem']}\n      >\n        <Text mb=\"0.75rem\" fontWeight=\"600\" color=\"primary.700\">\n          {subHeading}\n        </Text>\n        <Title as=\"h2\" size=\"sm\">\n          {title}\n        </Title>\n        <TimelineContainer>\n          {list.map((item, idx) => (\n            <TimelineRow\n              key={idx}\n              columns={['1fr', '', 'repeat(2, 1fr)']}\n              spacing=\"4.5rem 8rem\"\n              direction={idx % 2 === 0 ? 'tlr' : 'rtl'}\n            >\n              <TimelineNumber>\n                <Text color=\"white\">{idx + 1}</Text>\n              </TimelineNumber>\n              <TimelineText textAlign={idx % 2 === 0 ? 'right' : 'left'}>\n                <Title\n                  as=\"h3\"\n                  size=\"xs\"\n                  mb=\"1.25rem\"\n                  dangerouslySetInnerHTML={{\n                    __html: item.title.text,\n                  }}\n                />\n                <Text size=\"lg\">{item.description.text}</Text>\n                {item.buttons_active && (\n                  <TimelineButtons alignItems=\"center\">\n                    <Button type=\"light\" size=\"xl\" to=\"/\">\n                      <Icons\n                        name=\"headphones\"\n                        width=\"1rem\"\n                        height=\"1rem\"\n                        mr=\"0.5rem\"\n                      />\n                      Faire le test en ligne\n                    </Button>\n                    <Button type=\"gradient\" size=\"xl\" to=\"/appointment\">\n                      <Icons\n                        name=\"calendar\"\n                        width=\"1rem\"\n                        height=\"1rem\"\n                        mr=\"0.5rem\"\n                      />\n                      Prendre rendez-vous\n                    </Button>\n                  </TimelineButtons>\n                )}\n              </TimelineText>\n              <Box>\n                <GatsbyImage\n                  image={item.image.gatsbyImageData}\n                  alt={item.image.alt}\n                  style={{ width: '100%', height: 'auto' }}\n                  imgStyle={{ width: '100%', height: 'auto' }}\n                />\n              </Box>\n            </TimelineRow>\n          ))}\n          <TimelineLine />\n        </TimelineContainer>\n      </Container>\n    </Box>\n  )\n}\nexport default TimelineSection\n","import React, { FC } from 'react'\nimport CardSection from './CardSection'\nimport { SectionsTypes } from 'types/sections'\nimport ProductsSection from './ProductsSection'\nimport { Button } from './theme'\nimport RichTextSection from './RichTextSection'\nimport FeaturesSection from './FeaturesSection'\nimport BannerSection from './BannerSection'\nimport TimelineSection from './TimelineSection'\n\ntype SliceSectionParams = {\n  data: SectionsTypes\n}\n\nconst SliceSection: FC<SliceSectionParams> = ({ data }) => {\n  switch (data.slice_type) {\n    case 'card_section':\n      return (\n        <CardSection\n          subHeading={data.primary.subheading.text}\n          title={data.primary.title.text}\n          subtitle={data.primary.subtitle.text}\n          cards={data.items}\n        />\n      )\n    case 'products_section':\n      return (\n        <ProductsSection\n          bg={data.primary.background}\n          subHeading={data.primary.subheading.text}\n          title={data.primary.title.text}\n          description={data.primary.description.text}\n          button={\n            <Button type=\"gradient\" size=\"xl\" to={data.primary.button_link.url}>\n              {data.primary.button_text.text}\n            </Button>\n          }\n          products={data.items}\n        />\n      )\n    case 'rich_text_section':\n      return (\n        <RichTextSection\n          title={data.primary.title.text}\n          description={data.primary.description.text}\n          subHeading={data.primary.subheading.text}\n          button={<Button type=\"light\">{data.primary.button_text.text}</Button>}\n          image={data.primary.image}\n        />\n      )\n    case 'features_section':\n      return (\n        <FeaturesSection\n          title={data.primary.title.text}\n          description={data.primary.subtitle.text}\n          subHeading={data.primary.subheading.text}\n          image={data.primary.image}\n          list={data.items}\n        />\n      )\n    case 'banner_section':\n      return (\n        <BannerSection\n          bg={data.primary.background || undefined}\n          titleColor={data.primary.title_color || undefined}\n          textColor={data.primary.text_color || undefined}\n          title={data.primary.title.text}\n          subtitle={data.primary.subtitle.text}\n          list={data.items}\n        />\n      )\n    case 'timeline_section':\n      return (\n        <TimelineSection\n          title={data.primary.title.text}\n          subHeading={data.primary.subheading.text}\n          list={data.items}\n        />\n      )\n    default:\n      break\n  }\n\n  return <div></div>\n}\nexport default SliceSection\n","import React, { FC } from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from 'components/Layout'\nimport { Container, Hero, ImageBorder } from 'styles/globalStyle'\nimport { Title, Text, Icons, Button } from 'components/theme'\nimport { BasicPageTypes } from 'types/basicPageTypes'\nimport SliceSection from 'components/SliceSection'\n\ntype BasicPageParams = {\n  data: BasicPageTypes\n}\n\nconst BasicPage: FC<BasicPageParams> = ({ data }) => {\n  const {\n    hero_title,\n    hero_image,\n    hero_text,\n    hero_button_text,\n    hero_button_link,\n    body,\n  } = data.prismicBasicPage.data\n\n  return (\n    <Layout>\n      <Container>\n        <Hero>\n          <div>\n            <Title as=\"h2\" size=\"lg\" mb=\"1.5rem\">\n              {hero_title.text}\n            </Title>\n            <Text size=\"xl\">{hero_text.text}</Text>\n            <Button\n              type=\"gradient\"\n              size=\"xxl\"\n              mt=\"3rem\"\n              to={hero_button_link.url}\n            >\n              <Icons\n                name=\"calendar\"\n                width=\"1.25rem\"\n                height=\"1.25rem\"\n                mr=\"1rem\"\n              />\n              {hero_button_text.text}\n            </Button>\n          </div>\n          <ImageBorder\n            image={hero_image.gatsbyImageData}\n            alt={hero_image.alt}\n          />\n        </Hero>\n      </Container>\n      {body.map((item, idx) => (\n        <SliceSection key={idx} data={item} />\n      ))}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($uid: String) {\n    prismicBasicPage(uid: { eq: $uid }) {\n      data {\n        ...PrismicBasicPageDataTypeFragment\n      }\n    }\n  }\n`\n\nexport default BasicPage\n"],"names":["StyledHead","styled","StyledCard","subHeading","title","subtitle","cards","React","Box","bg","as","Container","py","Text","color","fontWeight","Title","size","Grid","columns","spacing","map","card","idx","key","ImageBorder","alt","image","gatsbyImageData","subheading","text","my","mb","flex","description","Button","type","button_text","button","products","textAlign","pt","pb","display","alignItems","flexDirection","maxWidth","m","product","itemBrand","product_brands","document","_product$product_bran","data","Flex","GatsbyImage","style","textTransform","name","list","item","Circle","width","height","Icons","icon","ml","mr","titleColor","textColor","mt","margin","TimelineText","withConfig","theme","colors","primary","bp","sm","TimelineRow","direction","TimelineContainer","TimelineLine","TimelineNumber","TimelineButtons","xl","dangerouslySetInnerHTML","__html","buttons_active","to","imgStyle","slice_type","CardSection","items","ProductsSection","background","button_link","url","RichTextSection","FeaturesSection","BannerSection","undefined","title_color","text_color","TimelineSection","prismicBasicPage","hero_title","hero_image","hero_text","hero_button_text","hero_button_link","body","Layout","Hero","SliceSection"],"sourceRoot":""}